import { Component, Output, EventEmitter } from '@angular/core';
import { Http, Headers, URLSearchParams } from '@angular/http';
import { ActivatedRoute } from '@angular/router';
import { AuthHttpService } from '../../../../../+common/services/auth-http.service';
import { environment } from '../../../../../../environments/environment';
import { DetailService } from '../detail.service';
declare var $: any;
@Component({
    selector: 'park',
    templateUrl: './park.component.html',
    styleUrls: ['./park.scss']
})
export class Park {
    public id: number;
    public basicInfo = {};
    public editInfo = {};
    public isEdit: boolean = false;
    private headers = new Headers({ 'Content-Type': 'application/json' });
    public CategoryName: Array<string> = [];
    public activate = new EventEmitter<string>();
    constructor(public auth: AuthHttpService, public route: ActivatedRoute, public http: Http, public service: DetailService) {
        service.setActive('park');
    }
    ngOnInit() {
        this.id = +this.route.snapshot.params['id'];
        this.service.id = this.id;
        this.service.isActive = true;
        let url = `api/SellerPark/GetSellerParkDetail/?id=${this.id}`;
        let totleUrl = `${environment.sellerCRMApi}${url}`;
        //let totleUrl = "http://localhost:6046/" + url;
        this.auth.get(totleUrl).subscribe((res) => {
            let result = res.json();
            result.createDate = result.createDate.replace("-", ".").replace("-", ".");
            this.basicInfo = result;
            Object.assign(this.editInfo, this.basicInfo);
        })



        var basicInformation = {
            init:function(){
                this.bindEvent();
            },
            bindEvent:function(){
                $(document).on("click","#baseInEdit",function(){
                    this.changeDetail();
                })
            },
        }
        basicInformation.init();


        function onOK(){
            if(validatorT.validate()){
                contractEdit.saveDetail();
                return true;
            }
            return false;
        }

        var str = '<form id="dialogForm">'
                        +'<div class="dialog-content-box">'
                            +'<ul>'
                                +'<li>姓名<span class="color-red">*</span></li>'
                                +'<li><input type="text" id="userName" name="userName" required validationMessage="请输入姓名" maxlength="20" class="k-textbox"/></li>'
                                +'<li>职位</li>'
                                +'<li><input type="text" id="post" name="post" class="k-textbox" maxlength="20"></li>'
                                +'<li>联系方式<span class="color-red">*</span></li>'
                                +'<li><input type="text" id="phone" name="phone" class="k-textbox" pattern="^(\\d{3,4}[-])?\\d{5,15}$" required validationMessage="请输入电话"/></li>'
                                +'<li>备注</li>'
                                +'<li><input type="text" id="noteT" name="noteT" class="k-textbox" maxlength="20"></li>'
                                +'<li>名片</li>'
                                +'<li>'
                                    +'<div class="demo-section k-content wide">'
                                        +'<div class="wrapper">'
                                            +'<div id="products"></div>'
                                            +'</div>'
                                         +'</div>'
                                    +'</div>'
                                    +'<input name="files" id="files" type="file" />'
                                +'</li>'
                            +'</ul>'
                        +'</div>'
                    +'</form>'
        var dialog = $("#dialog");


        dialog.kendoDialog({
            width: "450px",
            title: "新增联系人",
            closable: true,
            modal: false,
            content: str,
            actions: [
                { text: '取消'},
                { text: '确认', primary: true, action: onOK,className:"a-button"}
            ]
        });
        var validatorT = $("#dialogForm").kendoValidator({
            validate: function (e) {
            }
            // errorTemplate: "<span class='tip color-red size-12'>#=message#</span>"
        }).data("kendoValidator");




        var contractEdit = {
            str:"",
            init:function(){
                this.bindEvent();
            },
        }
        contractEdit.init();

        var str = '<span class="userName">张全蛋</span>'
                    +'<span class="post">业务经理</span>'
                    +'<span class="phone">135465415456</span>'
                    +'<span class="border-0 noteT" title="文字文字文字文字文字文字文字文字">文字文字文字文字文字文字文字文字</span>'
                    +'<div class="color-9">'
                        +'<i class="iconfont icon-dingdan ma-r10 cur-p edit-list"></i>'
                        +'<i class="iconfont icon-shanchu1 cur-p del-list"></i>'
                    +'</div>'
        $("#grid").kendoGrid({
            dataSource: {
                data: products,
                pageSize: 5
            },
            pageable: {
               pageSizes: true,
               buttonCount: 5
           },
           noRecords: true,
           messages: {
               noRecords: "There is no data on current page"
           },
            columns: [
                { field: "ProductName", title: "重要联系人",template:str}
            ]
        });
            }
            public resa: any;
            CategoryNameReady: boolean = false;
            baseInEdit() {
                if (!this.CategoryNameReady) {
                    let CategoryNameUrl = `${environment.sellerCRMApi}api/Customer/GetCategoryFirst/`
                    this.auth.get(CategoryNameUrl).subscribe((res) => {
                        let result = res.json();
                        for (let k in result) {
                            this.CategoryName.push(result[k].categoryName);
                        }
                        this.CategoryNameReady = true;
                    })
                }
                this.isEdit = true;
            }
            submitBaseInfo() {
                console.log(this.basicInfo);
                console.log(this.editInfo);
                let clientUrl = `${environment.sellerCRMApi}api/Customer/ModifyCustomer/`;
                // this.auth.post(url,aa).subscribe((res)=>{
                // 	console.log(res.json());
                // })
                this.http
                    .post(clientUrl, JSON.stringify(this.editInfo), { headers: this.headers })
                    .toPromise()
                    .then(res => this.resa = res.json())
                    .catch(this.handleError);
                Object.assign(this.basicInfo, this.editInfo);
                this.isEdit = false;
            }
            cancelBaseInfo() {
                this.isEdit = false;
            }
            private handleError(error: any): Promise<any> {
                console.error('An error occurred', error); // for demo purposes only
                return Promise.reject(error.message || error);
            }

}